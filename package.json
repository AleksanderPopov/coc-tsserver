{
  "name": "coc-tsserver",
  "version": "1.1.2",
  "description": "tsserver extension for coc",
  "main": "lib/index.js",
  "publisher": "chemzqm",
  "engines": {
    "coc": "^0.0.24"
  },
  "scripts": {
    "clean": "rimraf lib",
    "build": "tsc -p tsconfig.json",
    "prepare": "yarn clean && yarn build"
  },
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:javascript.jsx",
    "onLanguage:typescript",
    "onLanguage:typescript.tsx",
    "onLanguage:typescript.jsx",
    "onLanguage:typescriptreact",
    "onLanguage:jsx-tags",
    "onCommand:typescript.reloadProjects",
    "onCommand:javascript.reloadProjects",
    "onCommand:javascript.goToProjectConfig",
    "onCommand:typescript.goToProjectConfig",
    "onCommand:typescript.openTsServerLog",
    "onCommand:tsserver.watchBuild"
  ],
  "contributes": {
    "commands": [
      {
        "title": "Reload current project",
        "category": "TSServer",
        "command": "tsserver.reloadProjects"
      },
      {
        "title": "Open log file of tsserver.",
        "category": "TSServer",
        "command": "tsserver.openTsServerLog"
      },
      {
        "title": "Open project config file.",
        "category": "TSServer",
        "command": "tsserver.goToProjectConfig"
      },
      {
        "title": "Run `tsc --watch` for current project in terminal buffer.",
        "category": "TSServer",
        "command": "tsserver.watchBuild"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Tsserver",
      "properties": {
        "tsserver.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable tsserver extension"
        },
        "tsserver.locale": {
          "type": "string",
          "default": "",
          "description": "Locale of tsserver"
        },
        "tsserver.typingsCacheLocation": {
          "type": "string",
          "default": "",
          "description": "Folder path for cache typings"
        },
        "tsserver.orgnizeImportOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Orgnize import on buffer will save"
        },
        "tsserver.formatOnType": {
          "type": "boolean",
          "default": true,
          "description": "Run format on type special characters."
        },
        "tsserver.enableJavascript": {
          "type": "boolean",
          "default": true,
          "description": "Use tsserver for javascript files"
        },
        "tsserver.tsdk": {
          "type": "string",
          "default": "",
          "description": "Directory contains tsserver.js,"
        },
        "tsserver.npm": {
          "type": "string",
          "default": "",
          "description": "Executable path of npm for download typings"
        },
        "tsserver.log": {
          "type": "string",
          "default": "off",
          "enum": [
            "normal",
            "terse",
            "verbose",
            "off"
          ],
          "description": "Log level of tsserver"
        },
        "tsserver.trace.server": {
          "type": "string",
          "default": "off",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "description": "Trace level of tsserver"
        },
        "tserver.pluginNames": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "Module names of tsserver plugins"
        },
        "tsserver.pluginRoot": {
          "type": "string",
          "default": "",
          "description": "Folder contains tsserver plugins"
        },
        "tsserver.debugPort": {
          "type": "number",
          "description": "Debug port number of tsserver"
        },
        "tsserver.reportStyleChecksAsWarnings": {
          "type": "boolean",
          "default": true
        },
        "tsserver.implicitProjectConfig.checkJs": {
          "type": "boolean",
          "default": false,
          "description": "Enable checkJs for implicit project"
        },
        "tsserver.implicitProjectConfig.experimentalDecorators": {
          "type": "boolean",
          "default": false,
          "description": "Enable experimentalDecorators for implicit project"
        },
        "tsserver.disableAutomaticTypeAcquisition": {
          "type": "boolean",
          "default": false,
          "description": "Disable download of typings"
        },
        "typescript.updateImportsOnFileMove.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable update imports on file move."
        },
        "typescript.implementationsCodeLens.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable codeLens for implementations"
        },
        "typescript.referencesCodeLens.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable codeLens for references"
        },
        "typescript.preferences.importModuleSpecifier": {
          "type": "string",
          "default": "non-relative",
          "enum": [
            "non-relative",
            "relative"
          ]
        },
        "typescript.preferences.noSemicolons": {
          "type": "boolean",
          "default": false
        },
        "typescript.preferences.suggestionActions.enabled": {
          "type": "boolean",
          "default": true
        },
        "typescript.preferences.quoteStyle": {
          "type": "string",
          "default": "single",
          "enum": [
            "single",
            "double"
          ]
        },
        "typescript.suggest.enabled": {
          "type": "boolean",
          "default": true
        },
        "typescript.suggest.paths": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable suggest paths in import statement and require calls"
        },
        "typescript.suggest.autoImports": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable auto import suggests."
        },
        "typescript.suggest.completeFunctionCalls": {
          "type": "boolean",
          "default": true,
          "description": "Enable snippet for method suggestion"
        },
        "typescript.format.insertSpaceAfterCommaDelimiter": {
          "type": "boolean",
          "default": true
        },
        "typescript.format.insertSpaceAfterConstructor": {
          "type": "boolean",
          "default": false
        },
        "typescript.format.insertSpaceAfterSemicolonInForStatements": {
          "type": "boolean",
          "default": true
        },
        "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": {
          "type": "boolean",
          "default": true
        },
        "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
          "type": "boolean",
          "default": true
        },
        "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
          "type": "boolean",
          "default": true
        },
        "typescript.format.insertSpaceBeforeFunctionParenthesis": {
          "type": "boolean",
          "default": false
        },
        "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
          "type": "boolean",
          "default": false
        },
        "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
          "type": "boolean",
          "default": false
        },
        "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
          "type": "boolean",
          "default": false
        },
        "typescript.format.insertSpaceAfterTypeAssertion": {
          "type": "boolean",
          "default": false
        },
        "typescript.format.placeOpenBraceOnNewLineForFunctions": {
          "type": "boolean",
          "default": false
        },
        "typescript.format.placeOpenBraceOnNewLineForControlBlocks": {
          "type": "boolean",
          "default": false
        },
        "javascript.updateImportsOnFileMove.enable": {
          "type": "boolean",
          "default": true
        },
        "javascript.implementationsCodeLens.enable": {
          "type": "boolean",
          "default": true
        },
        "javascript.referencesCodeLens.enable": {
          "type": "boolean",
          "default": true
        },
        "javascript.preferences.importModuleSpecifier": {
          "type": "string",
          "default": "non-relative",
          "enum": [
            "non-relative",
            "relative"
          ]
        },
        "javascript.preferences.noSemicolons": {
          "type": "boolean",
          "default": false
        },
        "javascript.preferences.suggestionActions.enabled": {
          "type": "boolean",
          "default": true
        },
        "javascript.preferences.quoteStyle": {
          "type": "string",
          "default": "single",
          "enum": [
            "single",
            "double"
          ]
        },
        "javascript.suggest.names": {
          "type": "boolean",
          "default": true
        },
        "javascript.suggest.enabled": {
          "type": "boolean",
          "default": true
        },
        "javascript.suggest.paths": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable suggest paths in import statement and require calls"
        },
        "javascript.suggest.autoImports": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable auto import suggests."
        },
        "javascript.suggest.completeFunctionCalls": {
          "type": "boolean",
          "default": true,
          "description": "Enable snippet for method suggestion"
        },
        "javascript.format.insertSpaceAfterCommaDelimiter": {
          "type": "boolean",
          "default": true
        },
        "javascript.format.insertSpaceAfterConstructor": {
          "type": "boolean",
          "default": false
        },
        "javascript.format.insertSpaceAfterSemicolonInForStatements": {
          "type": "boolean",
          "default": true
        },
        "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": {
          "type": "boolean",
          "default": true
        },
        "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": {
          "type": "boolean",
          "default": true
        },
        "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": {
          "type": "boolean",
          "default": true
        },
        "javascript.format.insertSpaceBeforeFunctionParenthesis": {
          "type": "boolean",
          "default": false
        },
        "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": {
          "type": "boolean",
          "default": false
        },
        "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": {
          "type": "boolean",
          "default": false
        },
        "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": {
          "type": "boolean",
          "default": false
        },
        "javascript.format.insertSpaceAfterTypeAssertion": {
          "type": "boolean",
          "default": false
        },
        "javascript.format.placeOpenBraceOnNewLineForFunctions": {
          "type": "boolean",
          "default": false
        },
        "javascript.format.placeOpenBraceOnNewLineForControlBlocks": {
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "author": "chemzqm@gmail.com",
  "license": "MIT",
  "devDependencies": {
    "@chemzqm/tsconfig": "^0.0.3",
    "@chemzqm/tslint-config": "^1.0.17",
    "@types/node": "^10.11.7",
    "coc.nvim": "^0.0.23",
    "rimraf": "^2.6.2",
    "tslint": "^5.11.0"
  },
  "dependencies": {
    "@types/fast-diff": "^1.1.0",
    "fast-diff": "^1.2.0",
    "semver": "^5.6.0",
    "tslib": "^1.9.3",
    "typescript": "^3.1.3",
    "vscode-languageserver-protocol": "^3.13.0",
    "vscode-uri": "^1.0.6",
    "which": "^1.3.1"
  }
}

